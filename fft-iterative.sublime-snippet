<snippet>
	<content><![CDATA[
using type = complex<double>;
const double PI = acos(-1);

void fft(vector<type>& a, bool invert = false) {

	auto bit_reverse = [](int num, int lg_n) {

		int res = 0;

		for(int i = 0; i < lg_n; i++) {

			if(num & (1 << i)) {

				res |= (1 << (lg_n - 1 - i));
			}
		}

		return res;
	};

	int n = (int)a.size();
	int lg_n = 0;

	while ((1 << lg_n) < n) {

		lg_n++;
	}

	for(int i = 0; i < n; i++) {

		int br = bit_reverse(i, lg_n);

		if(i < br) {

			swap(a[i], a[br]);
		}
	}

	for(int len = 2; len <= n; len <<= 1) {

		double ang = 2 * PI / len * (invert ? -1 : 1);
		type wlen(cos(ang), sin(ang));

		for(int i = 0; i < n; i += len) {

			type w(1);

			for(int j = 0; j < len / 2; j++) {

				type u = a[i + j], v = a[i + j + (len / 2)] * w;
				a[i + j] = u + v;
				a[i + j + (len / 2)] = u - v;
				w *= wlen;
			}
		}
	}

	if(invert) {

		for(type& x : a) {

			x /= n;
		}
	}
}

vector<int> multiply(vector<int> const& a, vector<int> const& b) {

	vector<type> fa(a.begin(), a.end()), fb(b.begin(), b.end());
	int n = 1;

	while(n < (int)a.size() + (int)b.size()) {

		n <<= 1;
	}
	
	fa.resize(n);
	fb.resize(n);

	fft(fa);
	fft(fb);

	for(int i = 0; i < n; i++) {

		fa[i] *= fb[i];
	} 

	fft(fa, true);

	vector<int> result(n);

	for(int i = 0; i < n; i++) {

		result[i] = round(fa[i].real());
	}

	return result;
}
]]></content>
	<tabTrigger>fft</tabTrigger>
	<scope>source.c++</scope>
	<description>FFT (iterative)</description>
</snippet>
