<snippet>
	<content><![CDATA[
struct CHT {

	// works when lines are added in increasing order of slope

    typedef big ftype;
    typedef complex<ftype> point;
    #define x real
    #define y imag

    ftype dot(point a, point b) {
        
        return (conj(a) * b).x();
    }

    ftype cross(point a, point b) {

        return (conj(a) * b).y();
    }

    vector<point> hull, vecs;
    
    // hull contains the left endpoints of vectors
    // vecs contains the vectors

    void add_line(ftype k, ftype b) {

        point nw = {k, b};

        while(!vecs.empty() && dot(vecs.back(), nw - hull.back()) < 0) {

            hull.pop_back();
            vecs.pop_back();
        }

        if(!hull.empty()) {

            vecs.push_back(point(0, 1) * (nw - hull.back()));
        }

        hull.push_back(nw);
    }

    ftype query(ftype user_query) {

        point query_point = {user_query, 1};

        auto it = lower_bound(vecs.begin(), vecs.end(), query_point, [&](point a, point b) {

            return cross(a, b) > 0;
        });

        return dot(query_point, hull[it - vecs.begin()]);
    }
};
]]></content>
	<tabTrigger>convex_hull_trick</tabTrigger>
	<scope>source.c++</scope>
	<description>Convex Hull Trick for increasing-slope line additions</description>
</snippet>
