<snippet>
	<content><![CDATA[
vector<vector<int>> component;
vector<int> component_of;
int component_control;
int active_components;

void dsu_init(int n) {
		
	component_control = 0;
	active_components = 0;
	component_of.clear();
	component_of.resize(n);
	component.clear();
	component.resize(n);

	for(int i = 0; i < n; i++) {

		component_of[i] = i;
		component[i].push_back(i);
		active_components++;
	}
}

void dsu(int x, int y) {

	if(component_of[x] == -1 && component_of[y] == -1) {

		component.push_back({x, y});
		component_of[x] = component_of[y] = component_control++;

	} else if(component_of[x] == -1) {

		component_of[x] = component_of[y];
		component[component_of[x]].push_back(x);

	} else if(component_of[y] == -1) {

		component_of[y] = component_of[x];
		component[component_of[y]].push_back(y);

	} else {

		if(component_of[x] == component_of[y]) {

			return;
		}

		active_components--;
		int sx = component[component_of[x]].size();
		int sy = component[component_of[y]].size();

		if(sx > sy) {

			swap(x, y);
		}

		for(int node : component[component_of[x]]) {

			if(node != x) {

				component_of[node] = component_of[y];
				component[component_of[y]].push_back(node);
			}
		}

		component[component_of[y]].push_back(x);
		component[component_of[x]].clear();
		component_of[x] = component_of[y];
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dsu</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Naman's Disjoin Set Union snippet!</description>>
</snippet>
