<snippet>
	<content><![CDATA[
/*
++[---------->+<]>.-[------>+<]>-.++++++++.+++++.-[->+++++<]>-.-[--->++<]>--.+.[--->+<]>---.[->+++<]>++.++++++.-------.++++++.--[--->+<]>.-[->+++<]>-..+++++++++++++.[----->++<]>.------------.+[----->+<]>.--------.+++++++++++++.-------------.--[--->+<]>-.---[->++++<]>-.++++[->+++<]>.--[--->+<]>-.[->+++<]>++.-.+++.---.-[->+++<]>.-[--->++<]>+.++++.------.[--->+<]>---.+[----->+<]>.------------.+++++++.-------.--[--->+<]>---.+++[->+++<]>++..+++++++++.---------.-[->+++<]>.+[----->+<]>+.-------------.+++++++.+.----[->+++<]>-.

                                   __   __   ___  __ 
                                  /_ | / /  / _ \/_ |
  _ __   __ _ _ __ ___   __ _ _ __ | |/ /_ | | | || |
 | '_ \ / _` | '_ ` _ \ / _` | '_ \| | '_ \| | | || |
 | | | | (_| | | | | | | (_| | | | | | (_) | |_| || |
 |_| |_|\__,_|_| |_| |_|\__,_|_| |_|_|\___/ \___/ |_|
*/

#include <bits/stdc++.h>
using namespace std;

template<typename F, typename S>
istream& operator >>(istream& istream, pair<F, S>& p) {
	
	cin >> p.first >> p.second;
	return istream;
}

template<typename T>
istream& operator >>(istream& istream, vector<T>& v) {
	
	for(auto& element : v) {

		cin >> element;
	}

	return istream;
}

typedef long long big;
typedef long double ludo;
#define pbb pair<big, big>
#define pii pair<int, int>
#define fe first
#define se second
#define maxheap priority_queue
#define mset multiset
#define uset unordered_set
#define umap unordered_map
#define fr(i, s, e) for(int i = s; i < e; i++)
#define revfr(i, s, e) for(int i = s - 1; i >= e; i--)
#define getv(v, n) for(int i = 0; i < n; i++) cin >> v[i];
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL)
#define nl "\n"

#ifdef naman1601
#define debug(text) cout << (#text) << ": " << text << endl;
#else
#define debug(text)
#endif

const big mod = 1000000007;
// const big mod = 998244353;
const big infinity = 1000000000000000000;
const int inf = 1e9 + 5;


void solve() {

	${1:}
}


int main() {
	
	speed;

	int TC = 1;
	${2:}cin >> TC;

	for(int tc = 1; tc <= TC; tc++) {

		// cout << "Case #" << tc << ": ";
		solve();
	}

	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpsolve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>naman1601's very own C++ competitive programming snippet.</description>
</snippet>
